function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 17-Dec-2021 20:36:34.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
%
%   Xi = 1x16 cell 1, initial 16 input delay states.
%   Each Xi{1,ts} = 1xQ matrix, initial states for input #1.
%
%   Ai = 2x0 cell 2, initial 16 layer delay states.
%   Each Ai{1,ts} = 5xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 1x16 cell 1, final 16 input delay states.
%   Each Xf{1,ts} = 1xQ matrix, final states for input #1.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 5xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 2.2;
x1_step1.gain = 0.1;
x1_step1.ymin = -1;

% Layer 1
b1 = [0.97199707868033080604;0.84970240709995947803;-0.15937797632755229538;1.0266898895729188457;-0.97594420542873416835];
IW1_1 = [1.1643203366481720273 0.49641987130117720683 0.21682103241796155113 -0.36070702579375801822 -0.63232627381856620907 0.25981404483873221656 -0.4792071803023821297 0.44474051528543356859 0.6552414151529523112 -0.32814349734930092772 0.48106759479013710967 0.67674683717950467887 -0.16978295869501269788 -0.038525853384178965211 -0.52786539237376395306 -1.2116690674062451372;-1.9095656732460066785 0.37134714857414746758 0.24004771153025303287 0.42795817648364453678 -0.041692656469361440152 -0.35935296237911279471 -0.0038927266161121656246 0.0094089467297465041729 0.13529698349133911783 -0.12219476216648933464 0.13089459811230727548 -0.020724958762818226909 -0.1399168442843876925 0.20522233315021051747 -0.029022463010575490217 -0.048436983060905491882;0.71831294033107184749 0.19069597699561388615 0.55103108332861527874 0.00083979497994221053749 0.10073257589361640785 0.56303963721143190924 0.87823187871879238031 0.05126139279924417369 0.46277143086594685339 0.037426508025315309569 0.91282600785214285111 0.7955031371142412544 -0.13272285670007277769 0.34722959344625276001 0.19997807638948636444 0.10016027977701981444;0.0049777010823040240134 0.24140724990334530564 1.1218280414738708295 1.0383131860008940617 0.24691363116277817435 0.78448172692501805248 0.31155249996467826445 0.11014070302532852352 0.40507271660418014969 -0.043036511163894938803 -0.41926495815068010042 -0.74477937327956800218 -0.49600340174755286338 -0.58455426913975483405 0.047872907008641281401 -0.20375916589342424334;-0.82074081648885499618 -0.57978500801348853422 0.51788501121298624597 0.22354195970183288189 -0.083177859583127303211 0.1810618466588002351 -0.013746499712740348209 0.21636487684076011195 -0.37372905002758377568 -0.02953499318179627145 0.35794587583533038488 0.4262969940123262913 -0.15023777170215371624 -0.3573897815305027148 -0.31050175242053301705 -0.13220363586361935648];

% Layer 2
b2 = -0.32216715622047020773;
LW2_1 = [0.26278916543589719845 -0.74624115465261520175 0.015956501421574939559 0.093110769732270198817 -0.77975518691014711337];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.1;
y1_step1.xoffset = 2.2;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,17);
for ts=1:16
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+15,17)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]-1,17)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
finalxts = TS+(1: 16);
xits = finalxts(finalxts<=16);
xts = finalxts(finalxts>16)-16;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
